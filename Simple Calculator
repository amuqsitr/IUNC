Software Specifications : 
The calculator has the following keys: 0..9, ., +, -, *, /, ±, =, C, CE and 1-operand keys: 1/x, x2 , sqrt. In any situation the calculator has to produce a correct result defined by the well-known arithmetic rules. If the calculations is impossible the calculator has to display information helping the user to resolve the erroneous situation, like: 
• On encountering a division by 0 the display should read "Cannot divide by 0" and typing the key “CE” should reset the calculator. 
• On calculating the square root value of a negative operand the display should read "Wrong operand". 
• On erroneous operand or operation keys the display should read “Clear (CE) to continue” as appropriate. Of course, any situation can be cleared using the main reset key “CE”.

 
Design :
The calculator control system Before we start to think about a calculator state machine we should make a design of the calculator control system. We may consider a calculator control as a system that reacts to keys performing all elementary actions. This approach is a dead end street leading to a very complex state machine that is difficult to handle. We will define another way that is based on the observation that a calculator is a builder of strings that are executed when complete. The rules for handling such a calculator system are fairly simple: 
• Parse the incoming keys and assign them to the appropriate control value. 
• Complete an Expression string from incoming keys. 
• Perform a calculation defined by the Expression string according to arithmetic rules, when 1/12 encountering operator keys +, -, *, / as well as the Equals key =. 
We notice that we need several calculation functions as the rule for a calculation after Equals key and addition and subtraction operators are different than for multiplication and division operators.

Conclusions :
The design, specification and implementation of a calculator illustrates well the concept of the partition of control and data flow based on the virtual environment idea. 
The basic idea of the software solution for a calculator is to parse the string created by keys typed and execute it if appropriate. It sounds simple. 
The difficulty is the control of unexpected sequences of keys. We may say that the parser should react appropriately detecting the unexpected keys. 
The problem is that the definition of an unexpected key is context dependent. 
To recognize the context by conventional programming we may use flags and this is the source of problems: 
the control of flags leads to obscure programs that are difficult to develop and maintain. 
Experience shows that we may become crazy working with such software. 
Flags in a program mean that the software has a sequential character and the flags may be replaced by a state machine which is in a rule far easier to understand than the flags.
